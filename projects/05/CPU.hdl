// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // distinguish A- from C-instruction
    Mux16(a=instruction, b=outM, sel=instruction[15], out=ARegisterInput);

    // load A-register and set addressM
    Not(in=instruction[15], out=AInstructionFlag);
    Or(a=AInstructionFlag, b=instruction[5], out=loadA);
    Register(in=ARegisterInput, load=loadA, out=ARegisterOutput, out[0..14]=addressM);

    // load D-register
    And(a=instruction[15], b=instruction[4], out=loadD);
    Register(in=outM, load=loadD, out=DRegisterOutput);

    // distinguish A- vs. M- register
    And(a=instruction[15], b=instruction[12], out=workOnM);
    Mux16(a=ARegisterOutput, b=inM, sel=workOnM, out=AorMOutput);

    // ALU
    ALU(x=DRegisterOutput, y=AorMOutput, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, zr=EQZero, ng=NEG);

    // set writeM
    And(a=instruction[15], b=instruction[3], out=writeM);

    //// PC (by default increment)
    // unconditional jump
    And3Way(in[0]=instruction[0], in[1]=instruction[1], in[2]=instruction[2], out=JMP);
    // negative or zero
    Or(a=NEG, b=EQZero, out=NEGorZER);
    And3Way(in[0]=instruction[2], in[1]=instruction[1], in[2]=NEGorZER, out=JLE);
    // not zero
    Not(in=EQZero, out=NotZero);
    And3Way(in[0]=instruction[2], in[1]=instruction[0], in[2]=NotZero, out=JNE);
    // negative
    And(a=instruction[2], b=NEG, out=JLT);
    // non-negative
    Not(in=NEG, out=positive);
    Or(a=EQZero, b=positive, out=nonnegative);
    And3Way(in[0]=instruction[1], in[1]=instruction[0], in[2]=nonnegative, out=JGE);
    // zero
    And(a=instruction[1], b=EQZero, out=JEQ);
    // positive
    And3Way(in[0]=instruction[0], in[1]=NotZero, in[2]=positive, out=JGT);
    // Or the above jump conditions
    Or8Way(in[0]=JMP, in[1]=JLE, in[2]=JNE, in[3]=JLT, in[4]=JGE, in[5]=JEQ, in[6]=JGT, in[7]=false, out=jumpOut);
    // ensure parsing C-instruction
    And(a=instruction[15], b=jumpOut, out=jump);
    // finally assign program counter
    PC(in=ARegisterOutput, reset=reset, load=jump, inc=true, out[0..14]=pc);
}
